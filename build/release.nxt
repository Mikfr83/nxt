{
    "version": "1.17",
    "alias": "Release",
    "color": "#b33b5b",
    "mute": false,
    "solo": false,
    "references": [
        "generate_changelog_md.nxt",
        "GitUtils.nxt",
        "$NXT_BUILTINS/sub_graphs.nxt"
    ],
    "comp_overrides": {
        "generate_changelog_md.nxt": {
            "solo": false
        }
    },
    "meta_data": {
        "positions": {
            "/": [
                0.0,
                0.0,
                0.0
            ],
            "/BeginPR": [
                1200.0,
                0.0
            ],
            "/BeginRelease": [
                -260.0,
                0.0
            ],
            "/BeginRelease/GitCurBranch/CurBranch/ParseGitReturn": [
                0.0,
                0.0,
                0.0
            ],
            "/CheckCommits": [
                80.0,
                100.0
            ],
            "/CreateRelease": [
                1994.811198655299,
                71.54632804891172
            ],
            "/CreateRelease/UploadChangelog": [
                0.0,
                0.0
            ],
            "/CreateRelease/UploadHotkeys": [
                0.0,
                0.0
            ],
            "/CreateRelease/UploadPackage": [
                0.0,
                0.0
            ],
            "/DoIt": [
                -1640.0,
                900.0
            ],
            "/GenerateChangelog": [
                1500.0,
                0.0
            ],
            "/GenerateHotkeysMD": [
                1800.0,
                0.0
            ],
            "/GitCmd": [
                -800.0,
                760.0
            ],
            "/GitCmd2": [
                618.6319850156622,
                104.42705080595923
            ],
            "/GitCurBranch": [
                -800.0,
                520.0
            ],
            "/GitCurBranch2": [
                -160.0,
                420.0
            ],
            "/GitPR": [
                -1200.0,
                680.0
            ],
            "/GitRelease": [
                -800.0,
                600.0
            ],
            "/GitRelease2": [
                219.4455692046359,
                -150.45574389461672
            ],
            "/GitStatus": [
                -1220.0,
                480.0
            ],
            "/GitUpload": [
                -1200.0,
                760.0
            ],
            "/JsonLoad": [
                -1200.0,
                200.0
            ],
            "/JsonLoad2": [
                -720.0,
                420.0
            ],
            "/MakeReleaseDir": [
                540.0,
                0.0
            ],
            "/OldVersionCheck": [
                280.0,
                380.0
            ],
            "/PR_Dev": [
                1240.0,
                180.0
            ],
            "/ParseGitReturn": [
                -400.00000000000006,
                218.85416666666669
            ],
            "/ParseGitReturn2": [
                139.97772221620224,
                201.2760907674117
            ],
            "/ReleaseLoop": [
                1964.084268421378,
                0.13719056996283285
            ],
            "/STAGE": [
                -1123.7400818788076,
                -75.57563472014294
            ],
            "/UpdateHotkeys": [
                1811.2303797361437,
                -305.46632882310877
            ],
            "/UpdateMasterPR": [
                1520.0,
                -120.0
            ],
            "/UploadHotkeys2": [
                -1640.0,
                900.0
            ],
            "/ValidatePushed": [
                900.0,
                0.0
            ],
            "/_sub_graph": [
                -1200.0,
                0.0
            ],
            "/make_module_folder": [
                2260.0,
                160.0
            ],
            "/make_module_folder/zip_mod": [
                0.0,
                0.0
            ],
            "/make_package": [
                1880.0,
                0.0
            ],
            "/node": [
                1926.566028739176,
                71.20935983632955
            ],
            "/populate": [
                -800.0,
                680.0
            ],
            "/ship": [
                -1200.0,
                600.0
            ],
            "/unzip_env": [
                -1200.0,
                1000.0
            ],
            "/versions": [
                140.0,
                0.0
            ],
            "name": [
                0.0,
                0.0,
                0.0
            ]
        },
        "collapse": {
            "/BeginPR": false,
            "/BeginPR/PR_Dev/GetPR_URL": false,
            "/BeginPR/PR_Master": false,
            "/BeginPR/PR_Master/GetPR_URL": false,
            "/BeginPush/Push/ParseGitReturn": false,
            "/BeginRelease/CheckCommits": true,
            "/BeginRelease/CheckCommits/Status": false,
            "/BeginRelease/GitCurBranch/CurBranch": false,
            "/CheckCommits/Status": true,
            "/CheckCommits/Status/ParseGitReturn": true,
            "/CheckCommits/ValidateStatus": false,
            "/CreateRelease/UploadChangelog": false,
            "/CreateRelease/UploadHotkeys": false,
            "/GitCmd": false,
            "/GitCurBranch": true,
            "/GitCurBranch/CurBranch": false,
            "/GitCurBranch/CurBranch/ParseGitReturn": false,
            "/GitCurBranch/CurBranch/UpdateWorkingBranch": false,
            "/GitCurBranch/ValidateExactBranch": false,
            "/GitCurBranch/ValidateLegalBranch": false,
            "/GitPR": false,
            "/GitStatus": false,
            "/GitUpload": false,
            "/GitUpload/DoIt": false,
            "/JsonLoad": false,
            "/PR_Dev": false,
            "/ValidatePushed": false,
            "/ValidatePushed/Push": true,
            "/ValidatePushed/ValidatePush": false,
            "/VersionCheck/CheckoutMaster/ParseGitReturn": true,
            "/VersionCheck/CheckoutWorking/ParseGitReturn": true,
            "/VersionCheck/GitPull/ParseGitReturn": true,
            "/VersionCheck/LoadMasterVersion/ReadMasterVersion": true,
            "/VersionCheck/ValidateMaster/CurBranch": true,
            "/VersionCheck/ValidateMaster/CurBranch/ParseGitReturn": true,
            "/VersionCheck/ValidateMaster/CurBranch/UpdateWorkingBranch": true,
            "/VersionCheck/ValidateMaster/ValidateExactBranch": true,
            "/VersionCheck/ValidateMaster/ValidateLegalBranch": true,
            "/VersionCheck/ValidateWorking/CurBranch": true,
            "/VersionCheck/ValidateWorking/CurBranch/ParseGitReturn": true,
            "/VersionCheck/ValidateWorking/CurBranch/UpdateWorkingBranch": true,
            "/VersionCheck/ValidateWorking/ValidateExactBranch": true,
            "/VersionCheck/ValidateWorking/ValidateLegalBranch": true,
            "/make_package": false,
            "/populate": true,
            "/populate/docs": false,
            "/populate/launch": false,
            "/populate/src": false,
            "/populate/src/remove_extras": false,
            "/ship": true,
            "/ship/get_release": false,
            "/ship/upload": false,
            "/ship/zip": false,
            "/ship/zip/remove_ship_dir": false,
            "/unzip_env": true,
            "/unzip_env/remove_zipped": true,
            "/versions": false
        }
    },
    "nodes": {
        "/": {
            "child_order": [
                "CheckCommits",
                "ValidatePushed",
                "CreateRelease",
                "BeginPR",
                "ParseGitReturn",
                "ParseGitReturn2",
                "GitCmd",
                "GitCmd2",
                "JsonLoad2",
                "BeginRelease",
                "GitCurBranch2",
                "GenerateHotkeysMD",
                "UpdateMasterPR",
                "GenerateChangelog",
                "versions",
                "ReleaseLoop",
                "PR_Dev",
                "MakeReleaseDir",
                "make_module_folder"
            ],
            "comment": "This graph is meant to be referenced into another graph to run, only edit if you are sure you know what you're doing.\nAttrs will auto populate with the correct data as the graph runs. The only thing you need to setup is the 'release_type'.\nExpects you to have a 'secrets' file in the same dir as this graph. See the attr comment on 'secrets'.",
            "attrs": {
                "branch": {
                    "comment": "Name of the head branch",
                    "type": "raw",
                    "value": "dev"
                },
                "changelog_md": {
                    "comment": "File path to changelog.md",
                    "type": "raw",
                    "value": "${release_dir}/changelog.md"
                },
                "executable": {
                    "comment": "Path the current python executable",
                    "type": "raw",
                    "value": "python.exe"
                },
                "hotkeys_md": {
                    "comment": "File path to hotkeys.md",
                    "type": "raw",
                    "value": "${release_dir}/hotkeys.md"
                },
                "ignore_uncommited_changes": {
                    "comment": "Force the graph to ignore uncommited changes on disc",
                    "type": "bool",
                    "value": "False"
                },
                "master_pr_url": {
                    "comment": "The api url to the pr who's base is master",
                    "type": "raw",
                    "value": "https://api.github.com/repos/nxt-dev/${repo}/pulls/123"
                },
                "release_body": {
                    "comment": "Markdown or plain text used for the release body as well as the master PR",
                    "type": "raw",
                    "value": "Auto generated release"
                },
                "release_dict": {
                    "comment": "Data returned from REST request",
                    "type": "dict",
                    "value": "{}"
                },
                "release_dir": {
                    "comment": "File path to the temp dir were the release files get dumped",
                    "type": "raw",
                    "value": "${path::TEMP}"
                },
                "release_title": {
                    "comment": "Release title",
                    "type": "raw",
                    "value": "Release ${version}"
                },
                "release_type": {
                    "comment": "minor or hotfix",
                    "type": "NoneType"
                },
                "repo": {
                    "type": "raw",
                    "value": "nxt"
                },
                "secret": {
                    "comment": "tuple of (github_username, auth_token). DO NOT enter those details here! Please create a file with them and let the layer node load them for you.",
                    "type": "tuple",
                    "value": "()"
                },
                "secret_path": {
                    "type": "raw",
                    "value": "${file::secrets}"
                },
                "version": {
                    "type": "raw",
                    "value": "v4.5.6"
                }
            },
            "code": [
                "# Builtin",
                "import sys",
                "import os",
                "import subprocess",
                "import json",
                "import requests",
                "import pickle",
                "import webbrowser",
                "import shutil",
                "# Internal",
                "import nxt",
                "from nxt.constants import API_VERSION",
                ""
            ]
        },
        "/BeginPR": {
            "execute_in": "/ValidatePushed",
            "child_order": [
                "PR_Master",
                "DoDev"
            ],
            "comment": "Open a PR to master and dev, then open them in your browser.",
            "code": [
                "print(\"Beginning pull request...\")"
            ]
        },
        "/BeginPR/DoDev": {
            "code": [
                "if ${/versions.hotfix}:",
                "    execute(start='/PR_Dev')"
            ]
        },
        "/BeginPR/PR_Master": {
            "instance": "/GitPR",
            "child_order": [
                "GetPR_URL"
            ],
            "enabled": true,
            "attrs": {
                "body": {
                    "type": "raw",
                    "value": "Auto generated PR > ${target}"
                },
                "repo": {
                    "type": "raw",
                    "value": "${/.repo}"
                },
                "target": {
                    "type": "raw",
                    "value": "release"
                },
                "title": {
                    "value": "Release ${version}"
                }
            },
            "code": [
                "data = {",
                "    \"title\": \"${title}\",",
                "    \"body\": \"${body}\",",
                "    \"head\": \"${branch}\",",
                "    \"base\": \"${target}\"",
                "}",
                "print('Opening PR \"${title}\" from \"${branch}\" to \"${target}\"')",
                "url = 'https://api.github.com/repos/nxt-dev/${repo}/pulls'",
                "all_rel_resp = requests.get(url, auth=self.secret)",
                "if all_rel_resp.status_code != 200:",
                "    raise Exception('Cannot access pulls ({})'.format(all_rel_resp.status_code))",
                "pr_found = False",
                "all_prs = all_rel_resp.json()",
                "for pr in all_prs:",
                "    if pr['title'] == data['title']:",
                "        if pr['head']['label'] != 'nxt-dev:${branch}':",
                "            raise Exception('Incompatable exsisting PR called {}'.format(data['title']))",
                "        pr_dict = pr",
                "        pr_found = True",
                "        break",
                "    ",
                "",
                "if not pr_found:",
                "    print('Making new PR')",
                "    new_rel_resp = requests.post(url, auth=self.secret, data=json.dumps(data))",
                "    if new_rel_resp.status_code != 201:",
                "        raise Exception('Unsuccessful PR ({})'.format(new_rel_resp.text))",
                "    print('New PR made')",
                "    pr_dict = new_rel_resp.json()",
                "html_url = pr_dict[\"html_url\"]",
                "print(html_url)",
                "webbrowser.open_new_tab(html_url)",
                "self.pr_data = pr_dict"
            ]
        },
        "/BeginPR/PR_Master/GetPR_URL": {
            "enabled": true,
            "code": [
                "STAGE.master_pr_url = self.pr_data['url']"
            ]
        },
        "/BeginRelease": {
            "start_point": true,
            "child_order": [
                "load_auth",
                "set_version_string",
                "GitCurBranch",
                "CheckCommits"
            ],
            "comment": "Begin a release",
            "code": [
                "print('Beginning Release!')"
            ]
        },
        "/BeginRelease/CheckCommits": {
            "instance": "/GitStatus",
            "comment": "Check that there are no un-commited changes on the branch.",
            "code": [
                "print('Validating commits...')"
            ]
        },
        "/BeginRelease/GitCurBranch": {
            "instance": "/GitCurBranch",
            "child_order": [
                "CurBranch",
                "ValidateLegalBranch"
            ]
        },
        "/BeginRelease/GitCurBranch/CurBranch": {
            "child_order": [
                "ParseGitReturn",
                "UpdateWorkingBranch"
            ]
        },
        "/BeginRelease/GitCurBranch/CurBranch/ParseGitReturn": {
            "instance": "/GitCurBranch/CurBranch/ParseGitReturn",
            "attrs": {
                "key": {
                    "value": "\"*\""
                }
            },
            "code": [
                "self.lines = [l for l in self.input.split(\"\\n\") if l.startswith(${key})]",
                "if ${allow_multi_line}:",
                "    self.result = [l.strip(${key}).strip() for l in self.lines]",
                "else:",
                "    if self.lines:",
                "        self.result = w(self.lines[0].strip(${key}).strip())",
                "# print(self.input.split(\"\\n\"))"
            ]
        },
        "/BeginRelease/GitCurBranch/CurBranch/UpdateWorkingBranch": {
            "enabled": true
        },
        "/BeginRelease/GitCurBranch/ValidateLegalBranch": {
            "enabled": true
        },
        "/BeginRelease/load_auth": {
            "code": [
                "# Load git auth token",
                "with open('${secret_path}', 'rb') as fp:",
                "    STAGE.secret = pickle.load(fp)",
                ""
            ]
        },
        "/BeginRelease/set_version_string": {
            "code": [
                "STAGE.version = 'api-v' + API_VERSION.VERSION_STR"
            ]
        },
        "/CreateRelease": {
            "child_order": [
                "DraftRelease",
                "OpenReleaseURL"
            ],
            "comment": "Create the draft release and open it in your browser.",
            "code": [
                "print(\"Beginning release...\")"
            ]
        },
        "/CreateRelease/DraftRelease": {
            "instance": "/GitRelease",
            "attrs": {
                "body": {
                    "value": "STAGE.changelog_text + self.footer"
                },
                "footer": {
                    "type": "raw",
                    "value": "${contents::${file::release_footer.md}}"
                },
                "repo": {
                    "value": "${/.repo}"
                }
            }
        },
        "/CreateRelease/OpenReleaseURL": {
            "code": [
                "webbrowser.open(STAGE.release_dict[\"html_url\"], new=2)"
            ]
        },
        "/GenerateChangelog": {
            "execute_in": "/BeginPR",
            "child_order": [
                "ParseCommits",
                "UpdateMasterPR"
            ]
        },
        "/GenerateChangelog/UpdateMasterPR": {
            "code": [
                "data = {\"body\": STAGE.changelog_text}",
                "new_rel_resp = requests.post(STAGE.master_pr_url, auth=self.secret, data=json.dumps(data))",
                "if new_rel_resp.status_code != 200:",
                "    raise Exception('Unsuccessfully updated PR ({})'.format(new_rel_resp.text))",
                "print('Updated master PR')"
            ]
        },
        "/MakeReleaseDir": {
            "execute_in": "/versions",
            "code": [
                "dir_name = 'nxt_${version}'.replace('.', '-')",
                "dir_path = os.path.join('${path::}', dir_name)",
                "if os.path.isdir(dir_path):",
                "    print('Release dir already exsists, removing it...')",
                "    shutil.rmtree(dir_path)",
                "",
                "os.mkdir(dir_path)",
                "STAGE.release_dir = dir_path.replace(os.sep, '/')"
            ]
        },
        "/PR_Dev": {
            "instance": "/BeginPR/PR_Master",
            "child_order": [
                "GetPR_URL"
            ],
            "enabled": true,
            "attrs": {
                "target": {
                    "value": "dev"
                },
                "title": {
                    "type": "raw",
                    "value": "Release v${version} (${target})"
                }
            }
        },
        "/PR_Dev/GetPR_URL": {
            "enabled": false
        },
        "/ReleaseLoop": {
            "execute_in": "/GenerateChangelog",
            "comment": "Calls /CreateRelease",
            "attrs": {
                "release_types": {
                    "type": "tuple",
                    "value": "(${/versions.API}, ${/versions.GRAPH})"
                }
            },
            "code": [
                "# Parse return from versions sub-graph",
                "for version_info in ${release_types}:",
                "    # TODO: Don't make a release for graphs, just open a tab to create a tag",
                "    if not version_info:",
                "        continue",
                "    version_cat, version_str = version_info",
                "    version_tag = version_cat.lower() + '_v' + version_str",
                "    version_name = version_cat.capitalize()",
                "    parameters = {'/CreateRelease.version_tag': version_tag,",
                "                  '/CreateRelease.version_name': version_name,",
                "                  '/CreateRelease.version_str': version_str}",
                "    execute(start='/CreateRelease', parameters=parameters)"
            ]
        },
        "/ValidatePushed": {
            "execute_in": "/MakeReleaseDir",
            "child_order": [
                "Push",
                "GetRemoteHEAD",
                "ValidatePush"
            ],
            "comment": "Push your changes to remote.",
            "code": [
                "print('Validating pushed...')"
            ]
        },
        "/ValidatePushed/GetRemoteHEAD": {
            "attrs": {
                "remote_sha": {},
                "repo": {
                    "type": "raw",
                    "value": "nxt"
                }
            },
            "code": [
                "response = requests.get('https://api.github.com/repos/nxt-dev/${repo}/branches/${branch}', auth=self.secret, timeout=30)",
                "self.remote_branch_data = json.loads(response.content)",
                "self.remote_sha = self.remote_branch_data['commit']['sha']"
            ]
        },
        "/ValidatePushed/Push": {
            "instance": "/GitCmd",
            "attrs": {
                "cmd_args": {
                    "type": "str",
                    "value": "\"rev-parse\", \"HEAD\""
                }
            }
        },
        "/ValidatePushed/ValidatePush": {
            "code": [
                "if ${../Push/ParseGitReturn.result} != '${../GetRemoteHEAD.remote_sha}':",
                "    raise Exception('Your local HEAD does not match the remote HEAD, please push you commits!')",
                "print(\"Remote and local in sync!\")"
            ]
        },
        "/versions": {
            "instance": "/_sub_graph",
            "execute_in": "/BeginRelease",
            "comment": "Runs version validation sub-graph",
            "attrs": {
                "API": {
                    "type": "NoneType",
                    "value": "None"
                },
                "GRAPH": {
                    "type": "NoneType",
                    "value": "None"
                },
                "_graph_path": {
                    "type": "raw",
                    "value": "${file::../../nxt/build/validate_version_numbers.nxt}"
                },
                "hotfix": {
                    "type": "bool",
                    "value": "False"
                }
            }
        }
    }
}